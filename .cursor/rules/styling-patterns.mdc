---
description: 
globs: 
alwaysApply: true
---
# Styling Patterns in Expo Template

This rule explains the styling patterns used in the Expo template app.

## NativeWind Usage

The app uses NativeWind v4 (Tailwind CSS for React Native). All styling should be done using Tailwind classes via the `className` prop rather than StyleSheet.

```tsx
// ✅ Do this:
<View className="flex-1 bg-white p-4 rounded-lg" />

// ❌ Not this:
<View style={styles.container} />
```

## Color System

Colors are defined in [tailwind.config.js](mdc:tailwind.config.js) and should be referenced using Tailwind classes:

- `primary` - Main brand color (`#3B82F6` - blue by default)
- `secondary` - Secondary brand color (`#1F2937` - dark gray by default)
- `background` - Light background (`#F6F6F6`)
- State colors: `success`, `warning`, `danger`

```tsx
// Examples:
<View className="bg-primary" /> // Primary background
<Text className="text-secondary" /> // Secondary text
<View className="bg-background" /> // Light gray background
```

## Typography

Typography components are exported from [components/ui/Text.tsx](mdc:components/ui/Text.tsx) and can be imported from the UI components barrel file:

```tsx
import { Header, Paragraph } from "../components/ui";

// Usage:
<Header className="text-3xl font-bold text-gray-900">Title</Header>
<Paragraph className="text-base text-secondary">Body text</Paragraph>
```

## Component Patterns

### Buttons

Buttons are defined in [components/ui/Button.tsx](mdc:components/ui/Button.tsx) with these variants:

- `primary` - Primary button with default styling
- `secondary` - Secondary button with inverse styling
- `outline` - Transparent with border and primary text color
- `ghost` - Transparent with primary text color

Button sizes: `sm`, `md` (default), `lg`

```tsx
import { Button } from "../components/ui/Button";

// Usage:
<Button 
  title="Create account"
  variant="secondary" 
  size="lg"
  showArrow={true}
  onPress={() => {}}
/>
```

### Containers and Layout

The [Container](mdc:components/layout/Container.tsx) component provides consistent padding and flex behavior:

```tsx
import { Container } from "../components/layout/Container";

// Usage:
<Container className="justify-center items-center">
  {/* Content */}
</Container>
```

## Screen Structure

Screens typically follow this structure:

```tsx
<SafeAreaView className="flex-1 bg-background">
  <StatusBar style="dark" /> {/* or "light" for dark backgrounds */}
  <Container className="justify-start items-center p-5">
    {/* Content */}
  </Container>
</SafeAreaView>
```

Examples can be found in:
- [app/index.tsx](mdc:app/index.tsx) - Landing screen
- [app/(auth)/signup.tsx](mdc:app/(auth)/signup.tsx) - Signup form
