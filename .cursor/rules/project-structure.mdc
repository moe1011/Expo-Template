---
description: 
globs: 
alwaysApply: true
---
# Project Structure - Expo Template

## Overview
This is a React Native application built with Expo Router, NativeWind v4, Zustand for state management, and Supabase for backend services. The app follows a modular, component-based architecture with a focus on reusability.

## Package Management
This project uses [Bun](mdc:https:/bun.sh) as the package manager instead of npm for faster installation and better performance. 

```bash
# Installing dependencies
bun install

# Adding a new dependency
bun add package-name

# Adding a dev dependency
bun add -d package-name

# Running scripts
bun run start
```

## Key Directories

### `/app` 
Contains the screens and navigation structure using Expo Router's file-based routing system. This follows the (tabs) layout pattern.

### `/components`
Reusable UI components organized into:
- `/ui` - Base UI components that follow design system guidelines
- `/features` - Feature-specific components that may combine multiple UI components
- `/__tests__` - Component tests using Jest

### `/hooks`
Custom React hooks that encapsulate reusable logic:
- `useStore.ts` - Zustand store hooks
- `useQuery.ts` - TanStack Query hooks
- `useAnimation.ts` - Reanimated animation hooks
- `useStorage.ts` - MMKV storage hooks

### `/constants`
Application-wide constants:
- `colors.ts` - Color palette
- `theme.ts` - Theme configuration for NativeWind
- `api.ts` - API endpoints and configuration

### `/utils`
Helper functions and utility modules:
- `supabase.ts` - Supabase client configuration
- `storage.ts` - MMKV storage utility
- `animations.ts` - Reanimated animation utilities

### `/assets`
Static assets:
- `/fonts` - Custom fonts
- `/images` - Images and icons

## Tech Stack Reference

- **UI & Styling**: NativeWind v4 for Tailwind CSS in React Native
- **State Management**: Zustand for global state
- **Navigation**: Expo Router for file-based navigation
- **Animations**: React Native Reanimated v3
- **Gestures**: React Native Gesture Handler
- **Backend**: Supabase for authentication and database
- **Local Storage**: MMKV for high-performance storage
- **Data Fetching**: TanStack Query for remote data management
- **Image Handling**: Expo Image for optimized image loading
- **List Rendering**: FlashList for high-performance lists
